# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries
name: alphafold

channels:
  - pytorch
  - conda-forge
  - bioconda
  - adaptyvbio
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python
  - packaging>=23.2,<24.0
  - absl-py

  # --------- pytorch --------- #
  - torch>=2.3.1,<2.4.0
  - torchvision>=0.18,<0.19
  - lightning>=2.3.3,<2.4.0
  - torchmetrics>=1.4.1,<1.5.0

  # --------- kernels --------- #
  - deepspeed>=0.14.4,<0.15.0
  - einops>=0.8.0,<0.9.0

  # --------- hydra --------- #
  - hydra-core
  - hydra-colorlog
  - hydra-optuna-sweeper

  # --------- loggers --------- #
  - wandb
  # - neptune-client
  # - mlflow
  # - comet-ml
  # - aim>=3.16.2

  # --------- others --------- #
  - rootutils>=1.0.7,<1.1.0
  - pre-commit
  - rich>=13.7.0,<13.8.0
  - pytest>=8.0.0,<8.1.0
  - tree>=0.2.4,<0.3.0
  - dm-tree>=0.1.8,<0.2.0
  # - sh
  - pandas
  - p-tqdm
  - proteinflow>=2.7.0,<2.8.0
  - biopython>=1.79,<1.80
  - omegaconf>=2.3.0,<2.4.0
  - setuptools>=68.2.2,<68.3.0
  # - numpy>=1.24.4,<1.25.0
  # - scipy>=1.12.0,<1.13.0
  # - jax>=0.4.23,<0.5.0
  # - prettytable
  - tqdm>=4.66.1,<4.67.0
  - pandas>=2.2.0,<2.3.0
  - ml_collections