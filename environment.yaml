# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries
name: myenv

channels:
  - pytorch
  - conda-forge
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python=3.10
  - pytorch=2.*
  - torchvision=0.*
  
  - rich=13.*
  - pre-commit=3.*
  - pytest=7.*
  # --------- pytorch --------- #
  - torch~=2.2.0
  - torchvision~=0.17.0
  - lightning=2.*
  - torchmetrics=0.*
  # --------- hydra --------- #
  - hydra-core=1.*
  - hydra-colorlog
  - hydra-optuna-sweeper
  # --------- loggers --------- #
  - wandb
  # --------- others --------- #
  - rootutils~=1.0.7
  - pre-commit      # hooks for applying linters on commit
  - rich~=13.7.0
  - pytest~=8.0.0
  - tree~=0.2.4
  - dm-tree~=0.1.8
  - pandas
  - p-tqdm
  - proteinflow~=2.7.0
  - biopython~=1.79
  - omegaconf~=2.3.0
  - setuptools~=68.2.2
  - numpy~=1.24.4
  - scipy~=1.12.0
  - jax~=0.4.23
  - prettytable
  - tqdm~=4.66.1
  - pandas~=2.2.0
  - ml_collections
  # --------- base --------- #
  - packaging~=23.2
  - absl-py
