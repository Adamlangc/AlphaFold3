# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries
name: alphafold

channels:
  - pytorch
  - conda-forge
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  # --------- base --------- #
  - packaging=23.*
  - absl-py
  # --------- pytorch --------- #
  - torch=2.*
  - lightning=2.*
  - torchmetrics=0.*
  # --------- kernels --------- #
  - deepspeed=0.14.*  # works in Colab
  - einops=0.8.*
  # --------- hydra --------- #
  - hydra-core=1.*
  - hydra-colorlog
  # --------- loggers --------- #
  - wandb
  # --------- others --------- #
  - rootutils=1.*
  - pre-commit      # hooks for applying linters on commit
  - rich=13.*
  - pytest=8.*
  - tree=0.2.*
  - dm-tree=0.1.*
  - pandas
  - p-tqdm
  - proteinflow=2.7.0
  - biopython=1.*
  - omegaconf=2.3.*
  - setuptools=68.*
  - numpy=1.24.*
  - scipy=1.12.*
  - jax=0.4.*
  - prettytable
  - tqdm=4.*
  - pandas=2.2.*
